{"version":3,"sources":["recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","searchHandler","e","setState","search","target","value","console","log","state","findoneHandler","that","xmlhttp","XMLHttpRequest","url","data","onreadystatechange","this","readyState","status","JSON","parse","responseText","meals","valuehead","valueone","name","strMeal","ims","strMealThumb","catmeal","strCategory","areameal","strArea","desc","strInstructions","sourceurl","strSource","b","arr","key","match","push","ingrd","arrone","val","ingms","nodata","open","send","likeClickHandler","color","bgColor","valuecolor","class","className","type","placeholder","onChange","bind","href","onClick","src","alt","id","map","element","indexOf","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b084d849.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./recipe.css\";\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nclass Recipe extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      search: \"\",\n      ims: \"\",\n      value: 0,\n      valueone: 0,\n      nodata: \"\",\n      catmeal: \"\",\n      areameal: \"\",\n      ingrd: [],\n      ingms: [],\n      bgColor: \"\",\n      valuecolor: 0,\n      desc: \"\",\n      sourceurl: \"\",\n      valuehead: 0,\n      color: \"black\",\n    };\n  }\n\n  searchHandler = (e) => {\n    this.setState({\n      search: e.target.value,\n    });\n    console.log(this.state.search);\n  };\n\n  findoneHandler = () => {\n    // in this i called API if it will not execute then else will execute\n    //and setting state according to need\n    let that = this;\n\n    var xmlhttp = new XMLHttpRequest();\n    var url =\n      \"https://www.themealdb.com/api/json/v1/1/search.php?s=\" +\n      this.state.search;\n    var data = [];\n    xmlhttp.onreadystatechange = function () {\n      if (this.readyState === 4 && this.status === 200) {\n        if (JSON.parse(this.responseText).meals != null) {\n          that.setState({\n            value: 1,\n            valuehead: 1,\n            valueone: 0,\n            name: JSON.parse(this.responseText).meals[0].strMeal,\n            ims: JSON.parse(this.responseText).meals[0].strMealThumb,\n            catmeal: JSON.parse(this.responseText).meals[0].strCategory,\n            areameal: JSON.parse(this.responseText).meals[0].strArea,\n            desc: JSON.parse(this.responseText).meals[0].strInstructions,\n            sourceurl: JSON.parse(this.responseText).meals[0].strSource,\n          });\n          data = JSON.parse(this.responseText).meals;\n          console.log(\"inner\", data[0]);\n\n          var b = data[0];\n          console.log(\"outer\", data);\n          let arr = [];\n          for (var key in b) {\n            if (\n              key.match(\"strIngredient\") &&\n              b[key] !== \"\" &&\n              b[key] !== null\n            ) {\n              arr.push(b[key]);\n            }\n          }\n          console.log(arr);\n          that.setState({\n            ingrd: arr,\n          });\n          // here I m aextracting weight measue of ingredients and above code is taking name of it\n          let arrone = [];\n          for (var val in b) {\n            if (val.match(\"strMeasure\") && b[val] !== \"\" && b[val] !== null) {\n              arrone.push(b[val]);\n            }\n          }\n          that.setState({\n            ingms: arrone,\n          });\n        } else {\n          that.setState({\n            nodata: \"No data found\",\n            value: 0,\n            valueone: 1,\n            valuehead: 1,\n          });\n        }\n      }\n    };\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n  };\n  likeClickHandler = () => {\n    //It will change the color of Heart border when we click it.\n    if (this.state.color === \"black\") {\n      this.setState({ color: \"red\" });\n    } else {\n      this.setState({ color: \"black\" });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div class=\"card text-white bg-warning\">\n          <div class=\"card-body\">\n            <div className=\"hd\">Recipe Finder</div>\n          </div>\n        </div>\n        <div class=\"card text-white bg-info\">\n          <div class=\"card-body\">\n            <div className=\"search\">\n              <input\n                className=\"boxin\"\n                type=\"text\"\n                value={this.state.search}\n                placeholder=\"Enter the Name of Dish\"\n                onChange={this.searchHandler}\n              ></input>\n\n              <button type=\"button\" class=\"btn btn-danger\"\n                type=\"submit\"\n                onClick={this.findoneHandler.bind(this)}>Get Recipe</button>\n            </div>\n          </div>\n        </div>\n\n        {this.state.valuehead === 0 ? (\n          <div className=\"hdone\">\n            Type a Dish Name to Search for it's ingredients\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        {this.state.value === 1 ? (\n          <div className=\"contain\">\n            <div className=\"heading\">\n              <center>\n                <a href={this.state.sourceurl} className=\"link\">\n                  <span className=\"headone\">{this.state.name}</span>\n                </a>\n              </center>\n              <center>\n                <div className=\"like\">\n                  {/* Like functionality */}\n                  <FavoriteBorderOutlinedIcon\n                    className={this.state.color}\n                    onClick={() => this.likeClickHandler()}\n                  />\n                </div>\n              </center>\n            </div>\n\n            <div className=\"containerone\">\n              <div>\n                <img src={this.state.ims} alt=\"food\" className=\"pic\" />\n              </div>\n\n              <div className=\"containertwo\">\n                <div>\n                  <i>Category of Meal - </i> {this.state.catmeal}\n                </div>\n                <div>\n                  <i>Area of the Meal - </i> {this.state.areameal}\n                </div>\n                <div>\n                  <p className=\"ingrdhead\">Ingredients</p>\n                  <div id=\"box\">\n                    {/* this div for ingrd name */}\n\n                    <span>\n                      {this.state.ingrd.map((element) => {\n                        return <p key={element}>{element} --- </p>;\n                      })}\n                    </span>\n                    <span>\n                      {this.state.ingms.map((element) => {\n                        return (\n                          <p key={this.state.ingms.indexOf(element)}>\n                            {element}\n                          </p>\n                        );\n                      })}\n                    </span>\n\n                    {/* this is for weight measure */}\n                    <div>{}</div>\n                  </div>\n                </div>\n\n                <div>\n                  <center>\n                    {\" \"}\n                    <p className=\"ingrdhead\">Recipes</p>\n                  </center>\n                  <div className=\"desc\">{this.state.desc}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        {this.state.valueone === 1 ? (\n          <div>\n            <center>No Data Has been recieved</center>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\nexport default Recipe;\n","import React from 'react';\nimport './App.css';\nimport Recipe from './recipe'\nfunction App() {\n  return (\n    <Recipe />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}